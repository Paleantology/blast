
taxa <- readTaxonData("data/ages.tsv")
taxa
morpho <- readDiscreteCharacterData("data/matrix_only.nex")
morpho.addMissingTaxa(taxa)
moves = VectorMoves()
monitors = VectorMonitors()

     n_taxa <- taxa.size()

     num_branches <- 2 * n_taxa - 2



#     timeline <- v(.5, 4.5, 9)
      timeline <- v(360, 385, 398, 416, 419, 423, 428, 444, 460, 471, 488);
      # Diversification Rates based on Echinodermata
      speciation_rate ~ dnExponential(1.471);
      # NOTE: If it gets stuck in this script, then set origination & extinction to 1.0
      moves.append(mvScale(speciation_rate, lambda=0.01, weight=5));
      moves.append(mvScale(speciation_rate, lambda=0.10, weight=3));
      moves.append(mvScale(speciation_rate, lambda=1.00, weight=1));

      turnover ~ dnUnif(0.9, 1.05);
      moves.append(mvSlide(turnover, delta=0.01, weight=5));
      moves.append(mvSlide(turnover, delta=0.10, weight=3));
      moves.append(mvSlide(turnover, delta=1.00, weight=1));
      extinction_rate := turnover*speciation_rate;
      diversification := speciation_rate - extinction_rate;

      # old extinction stuff. We should not use this, as extinction should not be independent of origination!
      #extinction_rate ~ dnExponential(1.471);
      #moves.append(mvScale(extinction_rate, lambda=0.01, weight=5));
      #moves.append(mvScale(extinction_rate, lambda=0.10, weight=3));
      #moves.append(mvScale(extinction_rate, lambda=1.00, weight=1));
      #turnover := extinction_rate/speciation_rate;

      # Fossil Sampling Rates based on collection occupied by Echinodermata
      psi ~ dnExponential(3.892);
      completeness := psi/(extinction_rate+psi);
      moves.append(mvScale(psi, lambda=0.01, weight=5));
      moves.append(mvScale(psi, lambda=0.10, weight=3));
      moves.append(mvScale(psi, lambda=1.00, weight=1));

      # Proportional Taxon Sampling of Youngest Time Slice
      rho <- 0;	# 'extant' sampling.

     # Establish Basal Divergence Time
     origin_time ~ dnUnif(540, 600);
     moves.append(mvSlide(origin_time, delta=0.01, weight=5));
     moves.append(mvSlide(origin_time, delta=0.10, weight=3));
     moves.append(mvSlide(origin_time, delta=1.00, weight=1));


     fbd_dist = dnFBDP(originAge=origin_time, lambda=speciation_rate, mu=extinction_rate, psi=psi, rho=rho, timeline=timeline, taxa=taxa, condition="sampling")



     fbd_tree ~ dnConstrainedTopology(fbd_dist)


     moves.append(mvFNPR(fbd_tree, weight=15.0))

     moves.append(mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0))

     moves.append(mvNodeTimeSlideUniform(fbd_tree, weight=40.0))

     moves.append(mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5.0))



 # Setup the fossil tip sampling #

 # Use a for loop to create a uniform distribution on the occurence time for each fossil #

 # The boundaries of the uniform distribution are specified in the tsv file #

 fossils = fbd_tree.getFossils()
 for(i in 1:fossils.size())
{
    fossils[i]
    t[i] := tmrca(fbd_tree, clade(fossils[i]))
    print("t")
    t[i]
    a_i = fossils[i].getMinAge()
    print("a")
    a_i
    b_i = fossils[i].getMaxAge()
    print("b")
    b_i
    F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
        print("F")
    F[i]
 #   F[i].clamp( 0 )
}

 # Add a move to sample the fossil times #
 moves.append( mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0) )


     num_samp_anc := fbd_tree.numSampledAncestors()


     clock_morpho ~ dnExponential(1.0)

     moves.append( mvScale(clock_morpho, lambda=0.01, weight=4.0) )
     moves.append( mvScale(clock_morpho, lambda=0.1,  weight=4.0) )
     moves.append( mvScale(clock_morpho, lambda=1,    weight=4.0) )



     alpha_morpho ~ dnUniform( 0, 1E6 )

     rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

     #Moves on the parameters of the Gamma distribution.

     moves.append(mvScale(alpha_morpho, lambda=1, weight=2.0))





     n_max_states <- 7
     idx = 1

     feeding <- v(31,32,33,34,35,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,37,48)
     attachment <- v(16,17,18,19,20,21)
     oral_plate <- v(30,22,23,24,25,26,27,28,36)
     peri <- v(38)
     repro <- v(41)
     resp <- v(39, 40)
     thecal <- v(2,3,6)

     nonfeeding <- append(attachment, oral_plate)
     nonfeeding <- append(nonfeeding, peri)
     nonfeeding <- append(nonfeeding, repro)
     nonfeeding <- append(nonfeeding, resp)
     nonfeeding <- append(nonfeeding, thecal) 

     morpho_nonfeeding <- morpho  
     morpho_nonfeeding.excludeCharacter(nonfeeding)     
      for (i in 1:n_max_states) {
        morpho_feeding_bystate[i] <- morpho_nonfeeding  
        morpho_feeding_bystate[i].setNumStatesPartition(i)
         nc = morpho_feeding_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_feeding_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

     oral_platelet <- append(attachment, feeding)
     oral_platelet <- append(oral_platelet, peri)
     oral_platelet <- append(oral_platelet, repro)
     oral_platelet <- append(oral_platelet, resp)
     oral_platelet <- append(oral_platelet, thecal) 

     morpho_oral_plate <- morpho  
     morpho_oral_plate.excludeCharacter(oral_plate)     
      for (i in 1:n_max_states) {
        morpho_oral_plate_bystate[i] <- morpho_oral_plate  
        morpho_oral_plate_bystate[i].setNumStatesPartition(i)
         nc = morpho_oral_plate_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_oral_plate_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

    n_max_states <- 7

     nonattach <- append(oral_plate, feeding)
     nonattach <- append(nonattach, peri)
     nonattach <- append(nonattach, repro)
     nonattach  <- append(nonattach, resp)
     nonattach <- append(nonattach, thecal) 

     morpho_nonattach <- morpho  
     morpho_nonattach.excludeCharacter(nonattach)     
      for (i in 1:n_max_states) {
        morpho_nonattach_bystate[i] <- morpho_nonattach 
        morpho_nonattach_bystate[i].setNumStatesPartition(i)
         nc = morpho_nonattach_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_nonattach_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

    n_max_states <- 7

     periproct <- append(oral_platelet, feeding)
     periproct <- append(periproct, attachment)
     periproct <- append(periproct, repro)
     periproct  <- append(periproct, resp)
     periproct <- append(periproct, thecal) 

     morpho_periproct <- morpho  
     morpho_periproct.excludeCharacter(periproct)     
      for (i in 1:n_max_states) {
        morpho_periproct_bystate[i] <- morpho_periproct 
        morpho_periproct_bystate[i].setNumStatesPartition(i)
         nc = morpho_periproct_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_periproct_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

     repro <- append(oral_plate, feeding)
     repro <- append(repro, peri)
     repro <- append(repro, attachment)
     repro  <- append(repro, resp)
     repro <- append(repro, thecal) 

     morpho_repro <- morpho  
     morpho_repro.excludeCharacter(repro)     
      for (i in 1:n_max_states) {
        morpho_repro_bystate[i] <-  morpho_repro  
        morpho_repro_bystate[i].setNumStatesPartition(i)
         nc = morpho_repro_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_repro_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

     respire <- append(oral_plate, feeding)
     respire <- append(respire, peri)
     respire <- append(respire, repro)
     respire  <- append(respire, attachment)
     respire <- append(respire, thecal) 

     morpho_respire <- morpho  
     morpho_respire.excludeCharacter(respire)     
      for (i in 1:n_max_states) {
        morpho_respire_bystate[i] <- morpho_respire  
        morpho_respire_bystate[i].setNumStatesPartition(i)
         nc = morpho_respire_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_respire_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

     thecal <- append(oral_plate, feeding)
     thecal <- append(thecal, peri)
     thecal <- append(thecal, repro)
     thecal <- append(thecal, attachment)
     thecal <- append(thecal, resp) 

     morpho_thecal  <- morpho  
     morpho_thecal.excludeCharacter(thecal)     
      for (i in 1:n_max_states) {
        morpho_thecal_bystate[i] <- morpho_thecal  
        morpho_thecal_bystate[i].setNumStatesPartition(i)
         nc = morpho_thecal_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=rates_morpho,
                                         branchRates=clock_morpho,
                                         type="Standard")

             # attach the data
     	    m_morph[idx].clamp(morpho_thecal_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

m_morph
     mymodel = model(fbd_tree)



     monitors.append(mnModel(filename="output/parted.log", printgen=10))



     monitors.append(mnFile(filename="output/parted.trees", printgen=10, fbd_tree))



     monitors.append(mnScreen(printgen=10, num_samp_anc, origin_time))



     mymcmc = mcmc(mymodel, monitors, moves)


     mymcmc.run(generations=1000000)



     q()
