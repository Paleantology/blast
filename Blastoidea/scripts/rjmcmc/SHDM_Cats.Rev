################################################################################
#
# RevBayes Example: Bayesian model averaging using reversible-jump MCMC over
#            Mk and SHDM models using morphological character data.
#
################################################################################
####################
# Read in the data #
####################
this_gene = "Cinctans_for_RevBayes"
morpho_f <- readDiscreteCharacterData("data/feedingCharacters.nex")
morpho_nf <- readDiscreteCharacterData("data/nonfeedingCharacters.nex")
taxa <- readTaxonData("data/cincta_fossil_intervals_FA.tsv")

morpho_f.addMissingTaxa( taxa )
morpho_nf.addMissingTaxa( taxa )

#get some useful information about the data
n_taxa = taxa.size()
num_taxa = taxa.size()
num_branches = 2 * num_taxa - 3

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

# name the analysis
name = this_gene + "_" + "RJ"


#################################################
# Define the model of among-site rate variation #
#################################################

alpha ~ dnGamma(1E8, 0.5)
moves.append(mvScale(alpha, weight=10.0))
moves.append(mvScale(alpha, weight=10.0))


site_rates := fnDiscretizeGamma(alpha, alpha, 4)
###########################################
###########################################
#SHDM Model


###########################################


#################################
# Define the phyloCTMC model    #
# (AKA the likelihood function) #
#################################
idx = 1

fbd_indicator ~ dnCategorical(simplex(1, 1))
moves.append( mvRandomGeometricWalk(fbd_indicator, weight=10.0, tune=FALSE) )
     timeline1 <- v(10.8);
     timeline2 <- v(.5, 4.5, 9)
     timeline3 <- v(0.9, 2.3, 3.9, 6.3, 8.4, 10.8);
     fbd_vec := v(timeline1, timeline2, timeline3)
     fbd_indicator.setValue(3)
     timeline := fbd_vec[fbd_indicator]
     print(timeline)

# create the vector of clade constraints
    outgroup = clade("Ctenocystis");
    ingroup = clade("Gyrocystis_platessa","Gyrocystis_testudiformis","Gyrocystis_cruzae","Gyrocystis_badulesiensis","Gyrocystis_erecta","Progyrocystis_disjuncta","Protocinctus_mansillaensis","Elliptocinctus_barrandei","Elliptocinctus_vizcainoi","Sucocystis_theronensis","Sucocystis_bretoni","Lignanicystis_barriosensis","Undatacinctus_undata","Sucocystis_acrofera","Undatacinctus_quadricornuta","Undatacinctus_melendezi","Asturicystis_jaekeli","Sotocinctus_ubaghsi","Trochocystites_bohemicus","Trochocystoides_parvus","Ludwigicinctus_truncatus","Graciacystis_ambigua","Asturicystis_havliceki","Nelegerocystis_ivantzovi","Rozanovicystis_triangularis","Davidocinctus_pembrokensis");
    gyro = clade("Gyrocystis_platessa","Gyrocystis_testudiformis","Gyrocystis_cruzae","Gyrocystis_badulesiensis","Gyrocystis_erecta")
    constraints = v(outgroup, ingroup, gyro)
    source("rjMCMC/model_3_FBD.Rev")

timetree ~ dnConstrainedTopology(fbd_dist, constraints=constraints)
timetree
moves.append(mvFNPR(timetree , weight=num_branches/2));                              # time-tree pruning & grafting
moves.append(mvNNI(timetree , weight=num_branches/2));                               # nearest-neighbor interchanges
moves.append(mvCollapseExpandFossilBranch(timetree ,origin_time,weight=num_taxa/4)); # consider ancestor-descendant rather than sister species
moves.append(mvNodeTimeSlideUniform(timetree , weight=num_branches/2));              # adjust divergence times
moves.append(mvRootTimeSlideUniform(timetree , origin_time, weight=5));            # adjust basal divergence time.

# Setup the fossil tip sampling #
# Use a for loop to create a uniform distribution on the occurence time for each fossil #
# The boundaries of the uniform distribution are specified in the tsv file #
### Use stratigraphic range data to explicitly sample the fossil occurence times ###
# Use a for loop to create a uniform distribution on the occurence time for each fossil #
# The boundaries of the uniform distribution are specified in the tsv file #


 fossils = timetree.getFossils()
 for(i in 1:fossils.size())
 {
     t[i] := tmrca(timetree, clade(fossils[i]))

     a_i = fossils[i].getMinAge()
     b_i = fossils[i].getMaxAge()

     F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
     F[i].clamp( 0 )
 }


 moves.append( mvFossilTimeSlideUniform(timetree, origin_time, weight=5.0) )


     num_samp_anc := timetree.numSampledAncestors()

     pruned_fbd_tree := fnPruneTree(timetree, prune=v("Asturicystis_havliceki","Nelegerocystis_ivantzovi","Rozanovicystis_triangularis","Davidocinctus_pembrokensis"))




#clock_indicator ~dnCategorical(simplex(1,1))
#moves.append( mvRandomGeometricWalk(clock_indicator, weight=10.0, tune=FALSE) )

#model_indicator ~ dnCategorical(simplex(1,1,1,1,1,1,1))
#moves.append( mvRandomGeometricWalk(model_indicator, weight=10.0, tune=FALSE) )


source("rjMCMC/model_UCLN.Rev")
#source("rjMCMC/model_ACLN.Rev")
#source("rjMCMC/SHDM_8.Rev")
#source("rjMCMC/SHDM_7.Rev")
#source("rjMCMC/SHDM_6.Rev")
#source("rjMCMC/SHDM_5.Rev")
#source("rjMCMC/SHDM_4.Rev")
#source("rjMCMC/SHDM_3.Rev")
#source("rjMCMC/SHDM_2.Rev")


    n_max_states <- 3
     idx = 1
     for (i in 1:n_max_states) {
            morpho_f_bystate[i] <- morpho_f
        morpho_f_bystate[i].setNumStatesPartition(i)
         nc = morpho_f_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=timetree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=site_rates,
                                         branchRates=branch_rates,
                                         type="Standard")

             # attach the data
            m_morph[idx].clamp(morpho_f_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }

     n_max_states <- 4
     for (i in 1:n_max_states) {
                    morpho_nf_bystate[i] <- morpho_nf
    morpho_nf_bystate[i].setNumStatesPartition(i)
         nc = morpho_nf_bystate[i].nchar()
         # for non-empty character blocks
         if (nc > 0) {
             # make i-by-i rate matrix
             q[idx] <- fnJC(i)
     # create model of evolution for the character block
             m_morph[idx] ~ dnPhyloCTMC( tree=timetree,
                                         Q=q[idx],
                                         nSites=nc,
                                         siteRates=site_rates,
                                         branchRates=branch_rates,
                                         type="Standard")

             # attach the data
            m_morph[idx].clamp(morpho_nf_bystate[i])

             # increment counter
             idx = idx + 1
     idx
     }
     }


#########################
# Make the model object #
#########################
my_model = model(timetree)

#####################
# Make the monitors #
#####################

monitors.append(mnModel(filename="output_SHDM_RJClock/" + name + "/posterior_samples.log",printgen=10, separator = TAB))
monitors.append(mnFile(filename="output_SHDM_RJClock/" + name + "/tree_samples.trees",printgen=10, separator = TAB, timetree))
monitors.append(mnScreen(printgen=100)) #, model_indicator))

################
# Run the MCMC #
################

mymcmc = mcmc(my_model, moves, monitors, nruns=2, combine="mixed")
mymcmc.run(generations=2000000,tuningInterval=200)

#########################################
# Read in the posterior sample of trees #
# and compute the MAP tree              #
#########################################

# start by reading in the tree trace
treetrace = readTreeTrace("output_SHDM_RJClock/" + name + "/tree_samples.trees")
map_tree = mapTree(treetrace,"output_SHDM_RJClock/" + name + "/MAP_tree.tree")

# exit the program
q()
